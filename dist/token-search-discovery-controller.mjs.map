{"version":3,"file":"token-search-discovery-controller.mjs","sourceRoot":"","sources":["../src/token-search-discovery-controller.ts"],"names":[],"mappings":";;;;;;;;;;;;AAKA,OAAO,EAAE,cAAc,EAAE,kCAAkC;AAe3D,kBAAkB;AAElB,MAAM,cAAc,GAAG,gCAAgC,CAAC;AASxD,MAAM,sCAAsC,GAAG;IAC7C,cAAc,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE;IACnD,mBAAmB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE;CAChD,CAAC;AA4DX;;;;;;;GAOG;AACH,MAAM,UAAU,6CAA6C;IAC3D,OAAO;QACL,cAAc,EAAE,EAAE;QAClB,mBAAmB,EAAE,IAAI;KAC1B,CAAC;AACJ,CAAC;AAED;;;GAGG;AACH,MAAM,OAAO,8BAA+B,SAAQ,cAInD;IAKC,YAAY,EACV,kBAAkB,EAClB,qBAAqB,EACrB,KAAK,GAAG,EAAE,EACV,SAAS,GAMV;QACC,KAAK,CAAC;YACJ,IAAI,EAAE,cAAc;YACpB,QAAQ,EAAE,sCAAsC;YAChD,SAAS;YACT,KAAK,EAAE,EAAE,GAAG,6CAA6C,EAAE,EAAE,GAAG,KAAK,EAAE;SACxE,CAAC,CAAC;QApBI,qEAAmD;QAEnD,wEAAyD;QAoBhE,uBAAA,IAAI,sDAAuB,kBAAkB,MAAA,CAAC;QAC9C,uBAAA,IAAI,yDAA0B,qBAAqB,MAAA,CAAC;IACtD,CAAC;IAED,KAAK,CAAC,YAAY,CAChB,iBAAoC;QAEpC,MAAM,OAAO,GACX,MAAM,uBAAA,IAAI,0DAAoB,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;QAEjE,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;YACpB,KAAK,CAAC,cAAc,GAAG,OAAO,CAAC;YAC/B,KAAK,CAAC,mBAAmB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,qBAAqB,CACzB,0BAAsD;QAEtD,MAAM,OAAO,GAAG,MAAM,uBAAA,IAAI,0DAAoB,CAAC,qBAAqB,CAClE,0BAA0B,CAC3B,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;YACpB,KAAK,CAAC,cAAc,GAAG,OAAO,CAAC;YAC/B,KAAK,CAAC,mBAAmB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,iBAAiB,CACrB,MAA4B;QAE5B,OAAO,uBAAA,IAAI,6DAAuB,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC;IACvE,CAAC;IAED,KAAK,CAAC,aAAa,CACjB,MAAwB;QAExB,OAAO,uBAAA,IAAI,6DAAuB,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;IACnE,CAAC;IAED,KAAK,CAAC,YAAY,CAChB,MAAuB;QAEvB,OAAO,uBAAA,IAAI,6DAAuB,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;IAClE,CAAC;IAED,KAAK,CAAC,iBAAiB,CACrB,MAAsB;QAEtB,OAAO,uBAAA,IAAI,6DAAuB,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC;IACvE,CAAC;CACF","sourcesContent":["import type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedMessenger,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\n\nimport type { AbstractTokenDiscoveryApiService } from './token-discovery-api-service/abstract-token-discovery-api-service';\nimport type { AbstractTokenSearchApiService } from './token-search-api-service/abstract-token-search-api-service';\nimport type {\n  TokenSearchParams,\n  TokenSearchResponseItem,\n  MoralisTokenResponseItem,\n  TrendingTokensParams,\n  TopGainersParams,\n  TopLosersParams,\n  BlueChipParams,\n  SwappableTokenSearchParams,\n} from './types';\n\n// === GENERAL ===\n\nconst controllerName = 'TokenSearchDiscoveryController';\n\n// === STATE ===\n\nexport type TokenSearchDiscoveryControllerState = {\n  recentSearches: TokenSearchResponseItem[];\n  lastSearchTimestamp: number | null;\n};\n\nconst tokenSearchDiscoveryControllerMetadata = {\n  recentSearches: { persist: true, anonymous: false },\n  lastSearchTimestamp: { persist: true, anonymous: false },\n} as const;\n\n// === MESSENGER ===\n\n/**\n * The action which can be used to retrieve the state of the\n * {@link TokenSearchDiscoveryController}.\n */\nexport type TokenSearchDiscoveryControllerGetStateAction =\n  ControllerGetStateAction<\n    typeof controllerName,\n    TokenSearchDiscoveryControllerState\n  >;\n\n/**\n * All actions that {@link TokenSearchDiscoveryController} registers, to be\n * called externally.\n */\nexport type TokenSearchDiscoveryControllerActions =\n  TokenSearchDiscoveryControllerGetStateAction;\n\n/**\n * All actions that {@link TokenSearchDiscoveryController} calls internally.\n */\ntype AllowedActions = never;\n\n/**\n * The event that {@link TokenSearchDiscoveryController} publishes when updating\n * state.\n */\nexport type TokenSearchDiscoveryControllerStateChangeEvent =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    TokenSearchDiscoveryControllerState\n  >;\n\n/**\n * All events that {@link TokenSearchDiscoveryController} publishes, to be\n * subscribed to externally.\n */\nexport type TokenSearchDiscoveryControllerEvents =\n  TokenSearchDiscoveryControllerStateChangeEvent;\n\n/**\n * All events that {@link TokenSearchDiscoveryController} subscribes to internally.\n */\ntype AllowedEvents = never;\n\n/**\n * The messenger which is restricted to actions and events accessed by\n * {@link TokenSearchDiscoveryController}.\n */\nexport type TokenSearchDiscoveryControllerMessenger = RestrictedMessenger<\n  typeof controllerName,\n  TokenSearchDiscoveryControllerActions | AllowedActions,\n  TokenSearchDiscoveryControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Constructs the default {@link TokenSearchDiscoveryController} state. This allows\n * consumers to provide a partial state object when initializing the controller\n * and also helps in constructing complete state objects for this controller in\n * tests.\n *\n * @returns The default {@link TokenSearchDiscoveryController} state.\n */\nexport function getDefaultTokenSearchDiscoveryControllerState(): TokenSearchDiscoveryControllerState {\n  return {\n    recentSearches: [],\n    lastSearchTimestamp: null,\n  };\n}\n\n/**\n * The TokenSearchDiscoveryController manages the retrieval of token search results and token discovery.\n * It fetches token search results and discovery data from the Portfolio API.\n */\nexport class TokenSearchDiscoveryController extends BaseController<\n  typeof controllerName,\n  TokenSearchDiscoveryControllerState,\n  TokenSearchDiscoveryControllerMessenger\n> {\n  readonly #tokenSearchService: AbstractTokenSearchApiService;\n\n  readonly #tokenDiscoveryService: AbstractTokenDiscoveryApiService;\n\n  constructor({\n    tokenSearchService,\n    tokenDiscoveryService,\n    state = {},\n    messenger,\n  }: {\n    tokenSearchService: AbstractTokenSearchApiService;\n    tokenDiscoveryService: AbstractTokenDiscoveryApiService;\n    state?: Partial<TokenSearchDiscoveryControllerState>;\n    messenger: TokenSearchDiscoveryControllerMessenger;\n  }) {\n    super({\n      name: controllerName,\n      metadata: tokenSearchDiscoveryControllerMetadata,\n      messenger,\n      state: { ...getDefaultTokenSearchDiscoveryControllerState(), ...state },\n    });\n\n    this.#tokenSearchService = tokenSearchService;\n    this.#tokenDiscoveryService = tokenDiscoveryService;\n  }\n\n  async searchTokens(\n    tokenSearchParams: TokenSearchParams,\n  ): Promise<TokenSearchResponseItem[]> {\n    const results =\n      await this.#tokenSearchService.searchTokens(tokenSearchParams);\n\n    this.update((state) => {\n      state.recentSearches = results;\n      state.lastSearchTimestamp = Date.now();\n    });\n\n    return results;\n  }\n\n  async searchSwappableTokens(\n    swappableTokenSearchParams: SwappableTokenSearchParams,\n  ): Promise<TokenSearchResponseItem[]> {\n    const results = await this.#tokenSearchService.searchSwappableTokens(\n      swappableTokenSearchParams,\n    );\n\n    this.update((state) => {\n      state.recentSearches = results;\n      state.lastSearchTimestamp = Date.now();\n    });\n\n    return results;\n  }\n\n  async getTrendingTokens(\n    params: TrendingTokensParams,\n  ): Promise<MoralisTokenResponseItem[]> {\n    return this.#tokenDiscoveryService.getTrendingTokensByChains(params);\n  }\n\n  async getTopGainers(\n    params: TopGainersParams,\n  ): Promise<MoralisTokenResponseItem[]> {\n    return this.#tokenDiscoveryService.getTopGainersByChains(params);\n  }\n\n  async getTopLosers(\n    params: TopLosersParams,\n  ): Promise<MoralisTokenResponseItem[]> {\n    return this.#tokenDiscoveryService.getTopLosersByChains(params);\n  }\n\n  async getBlueChipTokens(\n    params: BlueChipParams,\n  ): Promise<MoralisTokenResponseItem[]> {\n    return this.#tokenDiscoveryService.getBlueChipTokensByChains(params);\n  }\n}\n"]}